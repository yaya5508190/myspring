<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:lang="http://www.springframework.org/schema/lang"
		xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
							http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
							http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
							http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd">
		<!--
			context: 提供spring的IOC容器功能的标签
			aop： 提供spring的AOP功能的标签
			lang: 提供
		-->
		<!--支持注解-->
		<!--相当于注册了一下四个后置处理器
			AutowiredAnnotationBeanPostProcessor
			CommonAnnotationBeanPostProcessor 
			PersistenceAnnotationBeanPostProcessor
			RequiredAnnotationBeanPostProcessor 
		-->
		<context:annotation-config/>
		<!--方法注入-->
		<bean id="superBean" class="bean.methodInjection.SuperBean">
			<lookup-method name="getBeanB" bean="beanB"/>
		</bean>
		<bean id="beanA" class="bean.methodInjection.BeanA">
			<property name="beanB" ref="beanB"/>
		</bean>
		<bean id="beanB" class="bean.methodInjection.BeanB" scope="prototype"></bean>
		<!--ref与idref的区别-->
		<bean id="refbeanA" class="bean.refAndIdref.BeanA" >
			<property name="beanBId">
				<!--local属性一定要容器内存在该bean否则会抛出异常-->
				<idref local="refbeanB"/>
				<!--<idref bean="refbeanB"/>等同于<property name="beanBId" value="refbeanB" />-->
			</property>
			<property name="beanB" ref="refbeanB"/>
		</bean>
		<bean id="refbeanB" class="bean.refAndIdref.BeanB" ></bean>
		<!--Aware-->
		<bean id="applicationContextAwareImp" class="bean.aware.ApplicationContextAwareImp"></bean>
		<bean id="beanNameAwareImp" class="bean.aware.BeanNameAwareImp"></bean>
		<bean id="applicationContextAuto" class="bean.aware.ApplicationContextByAutowire" autowire="byType"></bean>
		<!--thread scope-->
		<bean class="org.springframework.beans.factory.config.CustomScopeConfigurer">
			<property name="scopes">
				<map>
					<entry key="thread">
						<bean class="org.springframework.context.support.SimpleThreadScope"/>
					</entry>
				</map>
			</property>
		</bean>
		<bean id="threadScopeBean" class="bean.customScope.Bean" scope="thread">
			<aop:scoped-proxy/>
		</bean>
		<bean id="myThread1" class="myspring.customScope.MyThread1" scope="prototype">
			<property name="bean" ref="threadScopeBean"></property>
		</bean>
		
		<!--lifecycleMechanisms-->
		<!--<bean id="lifeBean" class="bean.lifecycleMechanisms.Bean" init-method="init" destroy-method="des"></bean> -->
		
		<bean id="BeanForLifecycle" class="bean.lifecycleMechanisms.BeanForLifecycle"></bean>
		
		<!--inheritance-->
		<!-- 可以不指定class 直接定义抽象类-->
		<bean id="inheritanceParent" class="bean.inheritance.Parent" abstract="true">
			<property name="name" value="parent"/>
			<property name="age" value="10"/>
		</bean>
		
		<bean id="inheritanceChild" class="bean.inheritance.Child" parent="inheritanceParent">
			<!-- <property name="name" value="child"/> -->
			<property name="age" value="5"/>
		</bean>
		
		<!--Dynamic Language Support-->
		<lang:groovy id="messenger" script-source="classpath:bean/groovy/GroovyMessenger.groovy" refresh-check-delay="500">
			<lang:property name="message" value="I Can Do The Frug" />
		</lang:groovy>
		<!--BeanPostProcessor bean后置处理器-->
		<!-- <bean id="MyBeanPostProcessor" class="bean.beanPostProcessor.MyBeanPostProcessor"/> -->
		
		<!--BeanFactoryPostProcessor-->
		<!--重写属性-->
		<context:property-override location="classpath:bean/beanFactoryPostProcessor/override.properties"/>
		<!--替换占位符-->
		<context:property-placeholder location="classpath:bean/beanFactoryPostProcessor/placeholder.properties"/>
		
		<bean id="beanFactoryProcessorBean" class="bean.beanFactoryPostProcessor.Bean">
			<!-- <property name="s" value="${JAVA_HOME}"/> -->
		</bean>
		
		<!--Customizing instantiation logic with a FactoryBean-->
		<bean id="myFactoryBean" class="bean.customizingFactoryBean.MyFactoryBean"/>
		
		
		<!--Annotation-based container configuration-->
		<!--AutoWired-->
		<bean id="autowiredBeanA" class="bean.annotation.autowired.BeanA"/>
		<bean id="autowiredBeanB" class="bean.annotation.autowired.BeanB"/>
		<bean id="autowiredBeanB1" class="bean.annotation.autowired.BeanB">
			<property name="string" value="autowiredBeanB1"/>
		</bean>
		<bean id="autowiredBeanB2" class="bean.annotation.autowired.BeanB">
			<property name="string" value="autowiredBeanB2"/>
		</bean>
		<bean id="autowiredBeanB3" class="bean.annotation.autowired.BeanB">
			<property name="string" value="autowiredBeanB3"/>
		</bean>
		<bean id="autowiredBeanC" class="bean.annotation.autowired.BeanC"/>
		<bean id="autowiredBeanD" class="bean.annotation.autowired.BeanD"/>
		
		<!--Qualifier-->
		<bean id="actionVshMovie" class="bean.annotation.autowired.MovieCatalog">
			<qualifier type="MovieQualifier">
				<attribute key="genre" value="action"/>
				<attribute key="format" value="VSH"/>
			</qualifier>
			<property name="name" value="actionVshMovie"/>
		</bean>
		<bean id="comedyVshMovie" class="bean.annotation.autowired.MovieCatalog">
			<qualifier type="MovieQualifier">
				<attribute key="genre" value="comedy"/>
				<attribute key="format" value="VSH"/>
			</qualifier>
			<property name="name" value="comedyVshMovie"/>
		</bean>
		<bean id="actionDvdMovie" class="bean.annotation.autowired.MovieCatalog">
			<qualifier type="MovieQualifier">
				<attribute key="genre" value="action"/>
				<attribute key="format" value="DVD"/>
			</qualifier>
			<property name="name" value="actionDvdMovie"/>
		</bean>
		<bean id="comedyDvdMovie" class="bean.annotation.autowired.MovieCatalog">
			<qualifier type="MovieQualifier">
				<attribute key="genre" value="comedy"/>
				<attribute key="format" value="DVD"/>
			</qualifier>
			<property name="name" value="comedyDvdMovie"/>
		</bean>
		
		<bean id="testCustomQualifier" class="bean.annotation.autowired.MovieCatalog">
			<property name="name" value="CustomQualifier"/>
		</bean>
		<bean id="MovieRecommender" class="bean.annotation.autowired.MovieRecommender"/>

	<!--只有只设置value属性的注解才需要在CustomAutowireConfigurer中注册 意义不大-->
	<bean id="customAutowireConfigurer" class="org.springframework.beans.factory.annotation.CustomAutowireConfigurer">
		<property name="customQualifierTypes">
			<set>
				<value>bean.annotation.autowired.customQualifier</value>
			</set>
		</property>
	</bean>
</beans>